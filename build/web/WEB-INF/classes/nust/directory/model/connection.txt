Download and install the MySQL server. Just do it the usual way. Remember the port number whenever you've changed it. It's by default 3306.

Download the JDBC driver and put in classpath, extract the ZIP file and put the containing JAR file in the classpath. The vendor-specific JDBC driver is a concrete implementation of the JDBC API (tutorial here).

If you're using an IDE like Eclipse or Netbeans, then you can add it to the classpath by adding the JAR file as Library to the Build Path in project's properties.

If you're doing it "plain vanilla" in the command console, then you need to specify the path to the JAR file in the -cp or -classpath argument when executing your Java application.

java -cp .;/path/to/mysql-connector.jar com.example.YourClass
The . is just there to add the current directory to the classpath as well so that it can locate com.example.YourClass and the ; is the classpath separator as it is in Windows. In Unix and clones : should be used.

Create a database in MySQL. Let's create a database javabase. You of course want World Domination, so let's use UTF-8 as well.

CREATE DATABASE javabase DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
Create an user for Java and grant it access. Simply because using root is a bad practice.

CREATE USER 'java'@'localhost' IDENTIFIED BY 'password';
GRANT ALL ON javabase.* TO 'java'@'localhost' IDENTIFIED BY 'password';
Yes, java is the username and password is the password here.

Determine the JDBC URL. To connect the MySQL database using Java you need an JDBC URL in the following syntax:

jdbc:mysql://hostname:port/databasename
hostname: The hostname where MySQL server is installed. If it's installed at the same machine where you run the Java code, then you can just use localhost. It can also be an IP address like 127.0.0.1. If you encounter connectivity problems and using 127.0.0.1 instead of localhost solved it, then you've a problem in your network/DNS/hosts config.

port: The TCP/IP port where MySQL server listens on. This is by default 3306.

databasename: The name of the database you'd like to connect to. That's javabase.

So the final URL should look like:

jdbc:mysql://localhost:3306/javabase
Test the connection to MySQL using Java. Create a simple Java class with a main() method to test the connection.

String url = "jdbc:mysql://localhost:3306/javabase";
String username = "java";
String password = "password"

System.out.println("Connecting database...");

try (Connection connection = DriverManager.getConnection(url, username, password)) {
    System.out.println("Database connected!");
} catch (SQLException e) {
    throw new IllegalStateException("Cannot connect the database!", e);
}
If you get a SQLException: No suitable driver, then it means that either the JDBC driver wasn't autoloaded at all or that the JDBC URL is wrong (i.e. it wasn't recognized by any of the loaded drivers). Normally, a JDBC 4.0 driver should be autoloaded when you just drop it in runtime classpath. To exclude one and other, you can always manually load it as below:

System.out.println("Loading driver...");

try {
    Class.forName("com.mysql.jdbc.Driver");
    System.out.println("Driver loaded!");
} catch (ClassNotFoundException e) {
    throw new IllegalStateException("Cannot find the driver in the classpath!", e);
}
Note that the newInstance() call is not needed here. It's just to fix the old and buggy org.gjt.mm.mysql.Driver. Explanation here. If this line throws ClassNotFoundException, then the JAR file containing the JDBC driver class is simply not been placed in the classpath.

Note that you don't need to load the driver everytime before connecting. Just only once during application startup is enough.

If you get a SQLException: Connection refused or Connection timed out or a MySQL specific CommunicationsException: 
Communications link failure, then it means that the DB isn't reachable at all. This can have one or more of the following causes:

IP address or hostname in JDBC URL is wrong.
Hostname in JDBC URL is not recognized by local DNS server.
Port number is missing or wrong in JDBC URL.
DB server is down.
DB server doesn't accept TCP/IP connections.
DB server has run out of connections.
Something in between Java and DB is blocking connections, e.g. a firewall or proxy. 

To solve the one or the other, follow the following advices:

Verify and test them with ping.
Refresh DNS or use IP address in JDBC URL instead.
Verify it based on my.cnf of MySQL DB.
Start the DB.
Verify if mysqld is started without the --skip-networking option.
Restart the DB and fix your code accordingly that it closes connections in finally.
Disable firewall and/or configure firewall/proxy to allow/forward the port. 

Note that closing the Connection is extremely important. If you don't close connections and keep getting a lot of them in a short time, then the database may run out of connections and your application may break. Always acquire the Connection in a try-with-resources statement. Or if you're not on Java 7 yet, explicitly close it in finally of a try-finally block. Closing in finally is just to ensure that it get closed as well in case of an exception. This also applies to Statement, PreparedStatement and ResultSet.

That was it as far the connectivity concerns. You can find here a more advanced tutorial how to load and store fullworthy Java model objects in a database with help of a basic DAO class.

shareimprove this answer
edited May 28 at 9:44

answered May 15 '10 at 13:55

BalusC
600k15720132307
1	 	
Can't we use Singleton pattern for creating connections? –  Bhavik Shah Feb 1 '13 at 6:03
  	 	
Using Singleton Pattern for using DB Connection resource is very good approach, you can read about different ways of singleton patten at journaldev.com/1377/… –  Pankaj Jan 19 '14 at 10:05
2	 	
@Pankaj: please don't spread nonsense. Using a singleton for DB connection absolutely isn't a "very good approach". –  BalusC Jan 19 '14 at 11:11 
5	 	
@Pankaj: an on long term instable application which no one would recommend any other. See also among others stackoverflow.com/q/9428573. This is #1 starters mistake. This coming from someone who pretends in his profile to have 7+ years Java/J2EE experience is just sad. –  BalusC Jan 20 '14 at 22:15 
1	 	
@Pankaj if you're using a small app as you say then there's no need for a static Connection object either since it's a small app. If you go for a standalone app, it is a multi threaded environment and the best option would be to use a connection pool to reuse the physical connection instead of opening/closing it per request. Please do not support bad practices. –  Luiggi Mendoza Dec 3 '14 at 14:38